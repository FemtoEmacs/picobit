#lang racket

(provide primitive-encodings)

(define primitive-encodings
  '((#%number?                    . 0)
    (#%+                          . 1)
    (#%-                          . 2)
    (#%mul-non-neg                . 3)
    (#%div-non-neg                . 4)
    (#%rem-non-neg                . 5)
    (#%=                          . 7)
    (#%<                          . 8)
    (#%>                          . 10)
    (#%pair?                      . 12)
    (#%cons                       . 13)
    (#%car                        . 14)
    (#%cdr                        . 15)
    (#%set-car!                   . 16)
    (#%set-cdr!                   . 17)
    (#%null?                      . 18)
    (#%eq?                        . 19)
    (#%not                        . 20)
    (#%get-cont                   . 21)
    (#%graft-to-cont              . 22)
    (#%return-to-cont             . 23)
    (#%halt                       . 24)
    (#%symbol?                    . 25)
    (#%string?                    . 26)
    (#%string->list               . 27)
    (#%list->string               . 28)
    (#%make-u8vector              . 29)
    (#%u8vector-ref               . 30)
    (#%u8vector-set!              . 31)
    (#%print                      . 32)
    (#%clock                      . 33)
    (#%motor                      . 34)
    (#%led                        . 35)
    (#%led2-color                 . 36)
    (#%getchar-wait               . 37)
    (#%putchar                    . 38)
    (#%beep                       . 39)
    (#%adc                        . 40)
    (#%u8vector?                  . 41)
    (#%sernum                     . 42)
    (#%u8vector-length            . 43)
    (#%boolean?                   . 48)
    (#%network-init               . 49)
    (#%network-cleanup            . 50)
    (#%receive-packet-to-u8vector . 51)
    (#%send-packet-from-u8vector  . 52)
    (#%ior                        . 53)
    (#%xor                        . 54)))
