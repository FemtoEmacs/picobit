#lang racket

(require racket/mpair)
(require "env.rkt")

;-----------------------------------------------------------------------------

(define-syntax-rule (define-primitive name nargs unspecified-result?)
  (make-var 'name #t '() '() '() #f
            (make-primitive nargs #f unspecified-result?)))


;-----------------------------------------------------------------------------

(provide make-global-env)

(define/contract (make-global-env) (-> mlist?)
  (mlist
   (define-primitive #%number? 1 #f)
   (define-primitive #%+ 2 #f)
   (define-primitive #%- 2 #f)
   (define-primitive #%mul-non-neg 2 #f)
   (define-primitive #%div-non-neg 2 #f)
   (define-primitive #%rem-non-neg 2 #f)
   (define-primitive #%= 2 #f)
   (define-primitive #%< 2 #f)
   (define-primitive #%> 2 #f)
   (define-primitive #%pair? 1 #f)
   (define-primitive #%cons 2 #f)
   (define-primitive #%car 1 #f)
   (define-primitive #%cdr 1 #f)
   (define-primitive #%set-car! 2 #t)
   (define-primitive #%set-cdr! 2 #t)
   (define-primitive #%null? 1 #f)
   (define-primitive #%eq? 2 #f)
   (define-primitive #%not 1 #f)
   (define-primitive #%get-cont 0 #f)
   (define-primitive #%graft-to-cont 2 #f)
   (define-primitive #%return-to-cont 2 #f)
   (define-primitive #%halt 0 #t)
   (define-primitive #%symbol? 1 #f)
   (define-primitive #%string? 1 #f)
   (define-primitive #%string->list 1 #f)
   (define-primitive #%list->string 1 #f)
   (define-primitive #%make-u8vector 1 #f)
   (define-primitive #%u8vector-ref 2 #f)
   (define-primitive #%u8vector-set! 3 #t)
   (define-primitive #%print 1 #t)
   (define-primitive #%clock 0 #f)
   (define-primitive #%motor 2 #t)
   (define-primitive #%led 3 #t)
   (define-primitive #%led2-color 1 #t)
   (define-primitive #%getchar-wait 2 #f)
   (define-primitive #%putchar 2 #t)
   (define-primitive #%beep 2 #f)
   (define-primitive #%adc 1 #f)
   (define-primitive #%u8vector? 1 #f)
   (define-primitive #%sernum 0 #f)
   (define-primitive #%u8vector-length 1 #f)
   (define-primitive #%boolean? 1 #f)
   (define-primitive #%network-init 0 #t)
   (define-primitive #%network-cleanup 0 #t)
   (define-primitive #%receive-packet-to-u8vector 1 #f)
   (define-primitive #%send-packet-from-u8vector 2 #f)
   (define-primitive #%ior 2 #f)
   (define-primitive #%xor 2 #f)

   (make-var '#%readyq #t '() '() '() #f #f)
   ;; TODO put in a meaningful order
   ))


;-----------------------------------------------------------------------------

(provide substitute-primitives)

;; list of primitives that can be safely substituted for the equivalent
;; function when it is called.
;; this saves the calls to the primitive wrapper functions, which are still
;; needed if a program needs the value of a "primitive", for example in :
;; (define foo car)
(define substitute-primitives
  '((number? . #%number?)
    (remainder . #%rem-non-neg)
    (= . #%=)
    (< . #%<)
    (> . #%>)
    (pair? . #%pair?)
    (cons . #%cons)
    (car . #%car)
    (cdr . #%cdr)
    (set-car! . #%set-car!)
    (set-cdr! . #%set-cdr!)
    (null? . #%null?)
    (eq? . #%eq?)
    (not . #%not)
    (modulo . #%rem-non-neg)
    (symbol? . #%symbol?)
    (string? . #%string?)
    (string->list . #%string->list)
    (list->string . #%list->string)
    (clock . #%clock)
    (beep . #%beep)
    (light . #%adc)
    (adc . #%adc)
    (sernum . #%sernum)
    (motor . #%motor)
    (led . #%led)
    (bitwise-ior . #%ior)
    (bitwise-xor . #%xor)
    (current-time . #%clock)
    (u8vector-length . #%u8vector-length)
    (u8vector-ref . #%u8vector-ref)
    (u8vector-set! . #%u8vector-set!)
    (boolean? . #%boolean?)
    (network-init . #%network-init)
    (network-cleanup . #%network-cleanup)
    (receive-packet-to-u8vector . #%receive-packet-to-u8vector)
    (send-packet-from-u8vector . #%send-packet-from-u8vector)
    ))


;-----------------------------------------------------------------------------

(provide primitive-encodings)

(define primitive-encodings
  '((#%number?                    . 0)
    (#%+                          . 1)
    (#%-                          . 2)
    (#%mul-non-neg                . 3)
    (#%div-non-neg                . 4)
    (#%rem-non-neg                . 5)
    (#%=                          . 7)
    (#%<                          . 8)
    (#%>                          . 10)
    (#%pair?                      . 12)
    (#%cons                       . 13)
    (#%car                        . 14)
    (#%cdr                        . 15)
    (#%set-car!                   . 16)
    (#%set-cdr!                   . 17)
    (#%null?                      . 18)
    (#%eq?                        . 19)
    (#%not                        . 20)
    (#%get-cont                   . 21)
    (#%graft-to-cont              . 22)
    (#%return-to-cont             . 23)
    (#%halt                       . 24)
    (#%symbol?                    . 25)
    (#%string?                    . 26)
    (#%string->list               . 27)
    (#%list->string               . 28)
    (#%make-u8vector              . 29)
    (#%u8vector-ref               . 30)
    (#%u8vector-set!              . 31)
    (#%print                      . 32)
    (#%clock                      . 33)
    (#%motor                      . 34)
    (#%led                        . 35)
    (#%led2-color                 . 36)
    (#%getchar-wait               . 37)
    (#%putchar                    . 38)
    (#%beep                       . 39)
    (#%adc                        . 40)
    (#%u8vector?                  . 41)
    (#%sernum                     . 42)
    (#%u8vector-length            . 43)
    (#%boolean?                   . 48)
    (#%network-init               . 49)
    (#%network-cleanup            . 50)
    (#%receive-packet-to-u8vector . 51)
    (#%send-packet-from-u8vector  . 52)
    (#%ior                        . 53)
    (#%xor                        . 54)))
